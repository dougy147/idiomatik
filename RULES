// This file contains **PUBLIC** RULES and AXIOMS
// In a multi-agent system, every agent is aware of those AXIOMS and RULES

// RULES represent AXIOMS or POSSIBLE TRANSFORMATIONS given an INPUT.
// It will also possible to give a CLASS of SYMBOLS as a RULE:
// For example : STR + STR <=> (STR + STR)
//
// The idea is to say to the program that "_" means ANY_OPERAND
//
// Rules are first parsed by 'read_rules.py' with PARSE(TOKENIZE(rule)) function
// Invalid rules propositions are excluded so that in IDIOMATIK, RULES are always TRUE.

// AXIOMS:
// Axioms are RULES without any TRANSFORMATION needed.
// Examples:
not a :: ~a
a = a

// TRANSFORMATION RULES:
// Transformation rules contain the REWRITE_AS operator
// There structure is PATTERN_TO_BE_MATCHED <=> REWRITTEN_PATTERN
// In the future, there could be multiple rewrite symbols with different directions
// Examples :

(_) --> _

((_)) --> (_)
(~ _) --> ~ _
A => B --> ~ A V B

// Peano's definition of addition
add_neutral :: A + 0 --> A
add_peano2  :: A + s(B) --> s(A + B)

// Peano's definition of multiplication
mult_neutral :: A . 0 --> 0
mult_peano2  :: A . s(B) --> A + (A . B)


// Error prone rules
mult_peano2  :: A . s(B) --> A + (A . B)
A --> B --> C
:: A --> B

//any_operand_test :: $1 --> $1 + 0
test_null :: $1 + 0 --> $1
test_swap :: $1 + $2 --> $2 + $1

