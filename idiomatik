#!/usr/bin/env python3

# encoding=utf8

# GOAL :
#Model = { 'R0 : A = B <=> B = A (swap)', 'P0 : "a" = "b"', 'P1 : "b" = "c"' }
#CHECK P1 : "a" = "c"

#RULES['AXIOMS'].append(RULE[1])
#RULES['REWRITE_RULES'].append(RULE[1])

import sys
from read_table import *
from lexer import *
from parser import *
from read_rules import *
from rewriter import *
from checker import *
from displayer import *

global last_proposition
global user_propositions
user_propositions = []

IDIOMATIK_PROMPT   = '> '
IDIOMATIK_GREETING = '''
+----------------------------------------------------------------------------+
|> Welcome to idiomatik! You can start writing expressions as inputs.        |
|  Read the documentation (if any) to learn about commands.                  |
+----------------------------------------------------------------------------+
'''

def evaluate_proposition(PROP):
    global last_proposition
    if PROP[0:1] == ":":
        match PROP:
            case ":q":
                exit(0)
            case ":t" | ":token":
                try:
                    print(TOKENIZE(last_proposition))
                except:
                    print("ERROR: you need to give an expression first.")
            case ":T" | ":tree":
                try :
                    render_tree(TOKENIZE(last_proposition))
                except:
                    print("ERROR: you need to give an expression first.")
            case ":s":
                try :
                    solving_surrounders = NULL.join(map(str, [x[1] for x in silent_surrounding(TOKENIZE(last_proposition))]))
                    print("Silent surrounding : {}".format(solving_surrounders))
                except:
                    print("ERROR: you need to give an expression first.")
            case ":a" | ":axioms" | ":rules":
                display_axioms_and_rules()
                #print(user_propositions)
            case ":r" | ":rewrite":
                try :
                    display_all_possible_rewritings(last_proposition)
                except :
                    print("ERROR: you need to give an expression first.")
            case ":h" | ":help":
                print("TODO: sorry, this help menu is not really helpful for now.")
            case _:
                print("ERROR: unknown command. See '{} --help' or ':help'.".format(sys.argv[0]))

    else :
        cur_proposition = str(PROP)
        if PARSE(TOKENIZE(cur_proposition))[0]:
            last_proposition = cur_proposition
            user_propositions.append(last_proposition)
            REWRITE_SYMBOL = "-->"
            if REWRITE_SYMBOL in cur_proposition : RULES['REWRITE_RULES'].append(TOKENIZE(cur_proposition))
            else : RULES['AXIOMS'].append(TOKENIZE(cur_proposition))
        else:
            print("ERROR: invalid syntax. TODO : say more about error.")

try :
    if sys.argv[1] :
        print("TODO: {} will soon accept receiving arguments.".format(sys.argv[0]))
except: pass
print(IDIOMATIK_GREETING)
while True:
    user_input = input(IDIOMATIK_PROMPT)
    proposition=str(user_input)
    evaluate_proposition(proposition)
