#!/usr/bin/env python3

# GOAL :
#Model = { 'R0 : A = B <=> B = A (swap)', 'P0 : "a" = "b"', 'P1 : "b" = "c"' }
#CHECK P1 : "a" = "c"

import sys
from os.path import exists
import glob
from read_table import *
from lexer import *
from parser import *
from read_rules import *
from displayer import *
from rewriter import *
import readline # allows left/right/up/down arrows in command prompt
from colors import *

sys.setrecursionlimit(10**6)

global last_proposition
last_proposition = ""
global user_propositions
user_propositions = [] # use it as history soon

IDIOMATIK_PROMPT   = bcolors.OKGREEN + '\n|> ' + bcolors.ENDC
IDIOMATIK_GREETING = bcolors.OKBLUE + '''
+---------------------------------------------------------------------+
|> Welcome to idiomatik! You can start writing expressions as inputs. |
|            Read the documentation (if any) to learn about commands. |
+---------------------------------------------------------------------+
''' + bcolors.ENDC

def add_rule(multiple=False,last_proposition=last_proposition):
    if multiple == True:
        try : last_proposition = input("    > ")
        except: print(bcolors.FAIL + "ERROR: invalid characters in input." + bcolors.ENDC)
        if last_proposition == "" or last_proposition == ":q" :
            print(bcolors.ERASE_LINE + bcolors.ERASE_UP + bcolors.ERASE_LINE) # Erase empty prompt
            return
    elif last_proposition.replace(NULL,'') == "" :
        print(bcolors.DIM + "Empty proposition" + bcolors.ENDC)
        return
    IMPORT_RULES([last_proposition],add_axioms=False)
    if multiple : add_rule(multiple=True)

def add_axiom(multiple=False,last_proposition=last_proposition):
    if multiple == True:
        try : last_proposition = input("    > ")
        except: print(bcolors.FAIL + "ERROR: invalid characters in input." + bcolors.ENDC)
        if last_proposition == "" or last_proposition == ":q" :
            print(bcolors.ERASE_LINE + bcolors.ERASE_UP + bcolors.ERASE_LINE) # Erase empty prompt
            return
    elif last_proposition.replace(NULL,'') == "" :
        print(bcolors.DIM + "Empty proposition" + bcolors.ENDC)
        return
    IMPORT_RULES([last_proposition],add_rules=False)
    if multiple : add_axiom(multiple=True)


def del_rule_or_axiom(user_value):
    found = False
    counter = 0
    try   : symbol_prop_id = SYMBOLS['OP'][SYMBOLS['OP NAMES'].index("PROP_ID")]
    except: symbol_prop_id = ""
    for i in range(len(RULES['REWRITE_RULES'])) :
        if "R"+str(i) == user_value or \
            "r"+str(i) == user_value or \
            str(i) == user_value :
                counter+=1
                found = True
                name = RULES['REWRITE_RULES_NAMES'][i]
                if name == "" :
                    #print(bcolors.OKBLUE + "Deleted R{} {}".format(i,human_readable(RULES['REWRITE_RULES'][i])) + bcolors.ENDC)
                    print(bcolors.DIM + bcolors.WARNING + " * [deleted R{}] {}".format(i,human_readable(RULES['REWRITE_RULES'][i])) + bcolors.ENDC)
                else :
                    print(bcolors.DIM + bcolors.WARNING + " * [deleted R{}] {} {} {}".format(i,name,symbol_prop_id,human_readable(RULES['REWRITE_RULES'][i])) + bcolors.ENDC)
                RULES['REWRITE_RULES'].pop(i)
                RULES['REWRITE_RULES_NAMES'].pop(i)
                break
    if found: return
    for i in range(len(RULES['REWRITE_RULES_NAMES'])) :
        if user_value == RULES['REWRITE_RULES_NAMES'][i] :
                #found = True
                counter+=1
                name = RULES['REWRITE_RULES_NAMES'][i]
                #print(bcolors.OKBLUE + "Deleted '{}' (R{}) {}".format(name,i,human_readable(RULES['REWRITE_RULES'][i])) + bcolors.ENDC)
                print(bcolors.DIM + bcolors.WARNING + " * [deleted R{}] {} {} {}".format(i,name,symbol_prop_id,human_readable(RULES['REWRITE_RULES'][i])) + bcolors.ENDC)
                RULES['REWRITE_RULES_NAMES'].pop(i)
                RULES['REWRITE_RULES'].pop(i)
                break
    if found: return
    for i in range(len(RULES['AXIOMS'])) :
        if "A"+str(i) == user_value or \
            "a"+str(i) == user_value or \
            str(i) == user_value :
                found = True
                counter+=1
                name = RULES['AXIOMS_NAMES'][i]
                if name == "" :
                    #print(bcolors.OKBLUE + "Deleted R{} {}".format(i,human_readable(RULES['AXIOMS'][i])) + bcolors.ENDC)
                    print(bcolors.DIM + bcolors.WARNING + " * [deleted A{}] {}".format(i,human_readable(RULES['AXIOMS'][i])) + bcolors.ENDC)
                else :
                    #print(bcolors.OKBLUE + "Deleted R{} ({}) {}".format(i,name,human_readable(RULES['AXIOMS'][i])) + bcolors.ENDC)
                    print(bcolors.DIM + bcolors.WARNING + " * [deleted A{}] {} {} {}".format(i,name,symbol_prop_id,human_readable(RULES['AXIOMS'][i])) + bcolors.ENDC)
                RULES['AXIOMS'].pop(i)
                RULES['AXIOMS_NAMES'].pop(i)
                break
    if found: return
    for i in range(len(RULES['AXIOMS_NAMES'])) :
        if user_value == RULES['AXIOMS_NAMES'][i] :
                #found = True
                counter+=1
                name = RULES['AXIOMS_NAMES'][i]
                #print(bcolors.OKBLUE + "Deleted '{}' (A{}) {}".format(name,i,human_readable(RULES['AXIOMS'][i])) + bcolors.ENDC)
                print(bcolors.DIM + bcolors.WARNING + " * [deleted A{}] {} {} {}".format(i,name,symbol_prop_id,human_readable(RULES['AXIOMS'][i])) + bcolors.ENDC)
                RULES['AXIOMS_NAMES'].pop(i)
                RULES['AXIOMS'].pop(i)
                break
    if found: return
    if counter == 0:
        print(bcolors.DIM + f"No rule or axiom matches '{user_value}'." + bcolors.ENDC)

def evaluate_proposition(PROP):
    ''' TODO : use a better command checker '''
    global last_proposition
    COMMAND = [x for x in PROP.split(' ') if x]
    if len(PROP) == 0: return
    #if PROP.replace(' ','') == '' : return
    #print(PROP)
    symbol_prop_id = SYMBOLS['OP'][SYMBOLS['OP NAMES'].index("PROP_ID")]
    #symbol_prop_id = SYMBOLS['SYMBOLS_CATEGORIES']['OP'][SYMBOLS['OP NAMES'].index("PROP_ID")]
    if symbol_prop_id in PROP :
        add_rule(multiple=False,last_proposition=PROP)
        return
    #match PROP.split(' ')[0]:
    match COMMAND[0]:
        case ":q" | "quit" | "exit" :
            exit(0)
        case "prop" | "proposition": # displays current proposition under scrutiny
            print(human_readable(PARSE(last_proposition).tokens))
        case "tok" | "token":
            #print(Lex(last_proposition).tokens)
            print(NULL.join(map(str,[x.symbol for x in PARSE(last_proposition).tokens])))
        case "TOK" | "TOKEN":
            #print(PARSE(last_proposition).tokens)
            print(NULL.join(map(str,[x.name for x in PARSE(last_proposition).tokens])))
        case "tree" | "draw" :
            try :
                render_tree(PARSE(last_proposition).tokens)
            except:
                print(bcolors.FAIL + "ERROR: cannot display tree." + bcolors.ENDC)
        case "surr" | "surrounding" :
            print("{}".format(silent_surrounding(PARSE(last_proposition).tokens)))
        case "axioms":
            display_axioms_and_rules("axioms")
        case "rules":
            display_axioms_and_rules("rules")
        case "subexp":
            for sub in PARSE(last_proposition).get_subexp(SECURE_SURROUND = True).subexp:
                print(NULL.join(map(str,[x.symbol for x in sub.tokens])))
        case "SUBEXP":
            for sub in PARSE(last_proposition).get_subexp(SECURE_SURROUND = False).subexp:
                print(NULL.join(map(str,[x.symbol for x in sub.tokens])))


        case "reset":
            if len(COMMAND) != 2 :
                print(bcolors.WARNING + "USAGE: 'reset <axioms|rules|all>'." + bcolors.ENDC)
            elif COMMAND[1] == "all" :
                for i in range(len(RULES['REWRITE_RULES'])):
                    RULES['REWRITE_RULES'].pop(0)
                    RULES['REWRITE_RULES_NAMES'].pop(0)
                for i in range(len(RULES['AXIOMS'])):
                    RULES['AXIOMS'].pop(0)
                    RULES['AXIOMS_NAMES'].pop(0)
                print(bcolors.DIM + bcolors.WARNING + "* [reset] Rules and axioms emptied." + bcolors.ENDC)
            elif COMMAND[1] == "rules" :
                for i in range(len(RULES['REWRITE_RULES'])):
                    RULES['REWRITE_RULES'].pop(0)
                    RULES['REWRITE_RULES_NAMES'].pop(0)
                print(bcolors.DIM + bcolors.WARNING + "* [reset] Rules emptied." + bcolors.ENDC)
            elif COMMAND[1] == "axioms" :
                for i in range(len(RULES['AXIOMS'])):
                    RULES['AXIOMS'].pop(0)
                    RULES['AXIOMS_NAMES'].pop(0)
                print(bcolors.DIM + bcolors.WARNING + "* [reset] Axioms emptied." + bcolors.ENDC)
            else :
                print(bcolors.WARNING + "USAGE: 'reset <axioms|rules|all>'." + bcolors.ENDC)

        case "load":
            if len(COMMAND) != 2 :
                print(bcolors.WARNING + "USAGE: 'load <filepath|*>'." + bcolors.ENDC)
            #elif exists(COMMAND[1]):
            elif glob.glob(COMMAND[1]):
                try :
                    for rule_file in glob.glob(COMMAND[1]):
                        IMPORT_RULES(STREAM=[],RULES_FILE=rule_file)
                        print(bcolors.DIM + bcolors.OKGREEN + "> Successfully imported rules from file '{}'.".format(rule_file) + bcolors.ENDC)
                except :
                    print(bcolors.FAIL + "ERROR: could not import file '{}'.".format(COMMAND[1]) + bcolors.ENDC)
            else :
                print(bcolors.FAIL + "ERROR: file '{}' does not exist.".format(COMMAND[1]) + bcolors.ENDC)

        case "save":
            #print("TODO: make it work properly...!")
            if len(COMMAND) != 2 :
                print(bcolors.WARNING + "USAGE: 'save <file>'." + bcolors.ENDC)
            else :
                try :
                    with open(COMMAND[1], "w+") as f:
                        #lines = [line.rstrip('\n') for line in f]
                        lines = f.readlines()
                        #print(lines)
                        for i in range(len(RULES['REWRITE_RULES'])) :
                            rule_str = NULL.join(map(str,[x[1] for x in RULES['REWRITE_RULES'][i]]))
                            rule_name = RULES['REWRITE_RULES_NAMES'][i]
                            symbol_prop_id = str(SYMBOLS['OP'][SYMBOLS['OP NAMES'].index("PROP_ID")])
                            if rule_name == "" :
                                to_append = rule_str
                            else :
                                to_append = rule_name + NULL + symbol_prop_id + NULL + rule_str
                            if not to_append in lines:
                                lines.insert(len(lines)-1,to_append)
                        f.writelines('\n'.join(lines))
                except :
                    print(bcolors.FAIL + "ERROR: could not write file '{}'. Try 'save ./{}'?".format(COMMAND[1],COMMAND[1]) + bcolors.ENDC)


        case "rewrite":
            if len(COMMAND) == 1 :
                print(bcolors.WARNING + "USAGE: 'rewrite <rule_name|rule_index|full> [<match_index>]'" + bcolors.ENDC)
            elif len(COMMAND) == 2 :
                match COMMAND[1]:
                    case "full" | "f" :
                        display_all_possible_rewritings(last_proposition)
                    case _ :
                        rule_or_index = COMMAND[1]
                        is_rule = False
                        for i in range(len(RULES['REWRITE_RULES_NAMES'])):
                            if rule_or_index == RULES['REWRITE_RULES_NAMES'][i]:
                                rule_or_index = i
                                is_rule = True
                                break
                        if is_rule == False and (rule_or_index[0] == "r" or rule_or_index[0] == "R") :
                            #rule_or_index = rule_or_index.replace('r','').replace('R','')
                            try :
                                rule_or_index = int(rule_or_index.replace('r','').replace('R',''))
                                is_rule = True
                            except :
                                print(bcolors.FAIL + "ERROR: no rule with name or index '{}'.".format(rule_or_index) + bcolors.ENDC)
                                return
                            if rule_or_index < 0 or rule_or_index >= len(RULES['REWRITE_RULES_NAMES']):
                                print(bcolors.FAIL + "ERROR: no rule with index '{}' (number of rules in memory={} rules in memory).".format(rule_or_index,len(RULES['REWRITE_RULES_NAMES'])) + bcolors.ENDC)
                                return
                        if is_rule == False :
                            try :
                                rule_or_index = int(rule_or_index)
                            except :
                                print(bcolors.FAIL + "ERROR: no rule with name '{}'.".format(rule_or_index) + bcolors.ENDC)
                                return
                            if rule_or_index < 0 or rule_or_index >= len(RULES['REWRITE_RULES']):
                                print(bcolors.FAIL + "ERROR: no rule with index '{}' (number of rules in memory={} rules in memory).".format(rule_or_index,len(RULES['REWRITE_RULES_NAMES'])) + bcolors.ENDC)
                                return
                            display_all_possible_rewritings(last_proposition,MATCH_INDEX=rule_or_index)
                        else :
                            display_given_a_rule(last_proposition,RULE_INDEX=rule_or_index)
            elif len(COMMAND) == 3 :
                match COMMAND[1]:
                    case _ :
                        rule_index = COMMAND[1]
                        rule_found = False
                        for i in range(len(RULES['REWRITE_RULES_NAMES'])):
                            if rule_index == RULES['REWRITE_RULES_NAMES'][i]:
                                rule_index = i
                                rule_found = True
                                break
                        if rule_found == False and (rule_index[0] == "r" or rule_index[0] == "R") :
                            #rule_index = rule_index.replace('r','').replace('R','')
                            try :
                                rule_index = int(rule_index.replace('r','').replace('R',''))
                            except :
                                print(bcolors.FAIL + "ERROR: '{}' is not a rule.".format(rule_index) + bcolors.ENDC)
                                return
                            if rule_index < 0 or rule_index >= len(RULES['REWRITE_RULES_NAMES']):
                                print(bcolors.FAIL + "ERROR: no rule with index '{}' (number of rules in memory={} rules in memory).".format(rule_index,len(RULES['REWRITE_RULES_NAMES'])) + bcolors.ENDC)
                                return
                        try :
                            rule_index = int(rule_index)
                        except:
                            print(bcolors.FAIL + "ERROR: no rule correspond to '{}'.".format(rule_index) + bcolors.ENDC)
                            return
                        if rule_found == False and (rule_index < 0 or rule_index >= len(RULES['REWRITE_RULES'])):
                            print(bcolors.FAIL + "ERROR: no rule with index '{}' (number of rules in memory={} rules in memory).".format(rule_index,len(RULES['REWRITE_RULES_NAMES'])) + bcolors.ENDC)
                            return
                        try :
                            match_index = int(COMMAND[2])
                        except :
                            print(bcolors.FAIL + "ERROR: '{}' is not a correct match index.".format(COMMAND[2]) + bcolors.ENDC)
                            return

                        #display_given_a_rule(last_proposition,RULE_INDEX=rule_index,MATCH_INDEX=match_index)
                        new_proposition  = str_rewrites_given_a_rule(PARSE(last_proposition).tokens,RULE_INDEX=rule_index,MATCH_INDEX=match_index)

                        if len(new_proposition) == 1 :
                            prev_proposition = last_proposition
                            last_proposition = new_proposition[0]
                            '''Exotic output formatting ...'''
                            middle_line = str(SYMBOLS['OP'][SYMBOLS['OP NAMES'].index("REWRITE_AS")])
                            print("\t " + bcolors.BOLD + bcolors.FAIL + "{}".format(prev_proposition) + bcolors.ENDC + " \t " + bcolors.OKBLUE + middle_line + bcolors.ENDC + " \t " + bcolors.BOLD + bcolors.OKGREEN + "{}".format(last_proposition) + bcolors.ENDC)
                        else:
                            print(bcolors.DIM + "No match index '{}' for rule '{}'".format(match_index,rule_index) + bcolors.ENDC)



        case "match" | "matches": # highlight rewritable parts of the token
            if len(COMMAND) == 1 :
                display_rewritable_parts(last_proposition)
            elif len(COMMAND) == 2 :
                rule_to_match = COMMAND[1]
                display_rewritable_parts(last_proposition,RULE_TO_MATCH=rule_to_match)
            elif len(COMMAND) == 3 :
                rule_to_match = COMMAND[1]
                match_index = COMMAND[2]
                try :
                    match_index = int(match_index)
                except:
                    print(bcolors.FAIL + "ERROR: '{}' is not a valid match index.".format(match_index) + bcolors.ENDC)
                    return
                display_rewritable_parts(last_proposition,RULE_TO_MATCH=rule_to_match,MATCH_INDEX=match_index)
            else :
                print(bcolors.FAIL + "ERROR: match syntax is 'match [r0 [index]]'" + bcolors.ENDC)


        case "debug" :
            if len(COMMAND) != 2 :
                print(bcolors.WARNING + "'debug' needs one thing to debug (e.g. 'debug all').")
            else :
                match COMMAND[1] :
                    case "all" : print(RULES)
                    case "rules" : print(RULES['REWRITE_RULES'])
                    case "axioms" : print(RULES['AXIOMS'])
                    case "symbols" : print(SYMBOLS)
                    case "history": print(user_propositions)
                    #case STR_REWRITES, etc.
                    case "rewrites":
                        try : print(REWRITES)
                        except : print("No REWRITES variable.")
                    case "parse":
                        #try : print(PARSE(TOKENIZE(last_proposition)))
                        try : print(PARSE(last_proposition))
                        except : print("Error while parsing current proposition.")
                    case "tokenize":
                        #try : print(TOKENIZE(last_proposition))
                        try : print(PARSE(last_proposition).tokens)
                        except : print("Error while tokenizing current proposition.")
                    case _: print("Unknown debug command.")

        case "del" | "delete":
            if len(COMMAND) == 1 :
                print(bcolors.WARNING + "INFO: use 'delete Ax' or 'delete Rx' to delete an axiom or a rule given an index.\nYou can also delete by name." + bcolors.ENDC)
                for i in range(len(RULES['REWRITE_RULES'])) :
                    print(bcolors.OKBLUE + "\t(R{}) \t{}".format(i,human_readable(RULES['REWRITE_RULES'][i])) + bcolors.ENDC)
            elif len(COMMAND) > 2 : print("ERROR: 'delete' needs precisely one rule or axiom number/name.")
            else : del_rule_or_axiom(COMMAND[1])

        case "add" :
            if len(COMMAND) == 1 or len(COMMAND) > 2 : print("ERROR: 'add' needs precisely of those arguments: 'axiom', 'rule', 'proposition'")
            else :
                match COMMAND[1]:
                    case "axiom"  | "a"  : add_axiom(multiple=False,last_proposition=last_proposition)
                    case "axioms" | "as" : add_axiom(multiple=True)
                    case "rule"   | "r"  : add_rule(multiple=False,last_proposition=last_proposition)
                    case "rules"  | "rs" : add_rule(multiple=True)
                    case "prop"   | "p" | "proposition": print("TODO")

        case "rename" :
            if len(COMMAND) != 3 : print("ERROR: 'rename' needs precisely two arguments: 'old_name', 'new_name'")
            else :
                found = False
                if "A" in COMMAND[1] or "a" in COMMAND[1]:
                    try:
                        index = int(COMMAND[1].replace("A","").replace("a",""))
                        RULES['AXIOMS_NAMES'][index] = COMMAND[2]
                        found = True
                    except : found = False
                elif "R" in COMMAND[1] or "r" in COMMAND[1]:
                    try:
                        index = int(COMMAND[1].replace("R","").replace("r",""))
                        RULES['REWRITE_RULES_NAMES'][index] = COMMAND[2]
                        found = True
                    except: found = False
                else :
                    for i in range(len(RULES['AXIOMS_NAMES'])):
                        if COMMAND[1] == RULES['AXIOMS_NAMES'][i] :
                            found = True
                            RULES['AXIOMS_NAMES'][i] = COMMAND[2]
                            break
                    if not found :
                        for i in range(len(RULES['REWRITE_RULES_NAMES'])):
                            if COMMAND[1] == RULES['REWRITE_RULES_NAMES'][i] :
                                found = True
                                RULES['REWRITE_RULES_NAMES'][i] = COMMAND[2]
                                break
                if not found : print("ERROR: no axiom nor rule with that index or name.")

        case "undo":
            print("TODO: sorry, this undo does not do anything.")

        case "help":
            print("TODO: sorry, this help menu is not really helpful for now.")

        case _:
            #print(bcolors.FAIL + "ERROR: unknown command. See '{} --help' or ':help'.".format(sys.argv[0]) + bcolors.ENDC)
            cur_proposition = str(PROP)
            #if PARSE(TOKENIZE(cur_proposition))[0]:
            if PARSE(cur_proposition).validity:
                last_proposition = cur_proposition
                user_propositions.append(last_proposition)

try :
    if sys.argv[1] :
        print(bcolors.OKBLUE + "INFO: '{}' will accept receiving arguments in the future... But not now!".format(sys.argv[0]) + bcolors.ENDC)
except:
    pass

print(IDIOMATIK_GREETING)

while True:
    try :
        user_input = input(IDIOMATIK_PROMPT)
    except:
        print(bcolors.FAIL + "ERROR: invalid characters in input." + bcolors.ENDC)
        continue
    proposition=str(user_input)
    evaluate_proposition(proposition)
